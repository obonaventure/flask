# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-12 16:28+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../quickstart.rst:4
msgid "Quickstart"
msgstr ""

#: ../../quickstart.rst:6
msgid ""
"Eager to get started? This page gives a good introduction to Flask. "
"Follow :doc:`installation` to set up a project and install Flask first."
msgstr ""

#: ../../quickstart.rst:11
msgid "A Minimal Application"
msgstr ""

#: ../../quickstart.rst:13
msgid "A minimal Flask application looks something like this:"
msgstr ""

#: ../../quickstart.rst:26
msgid "So what did that code do?"
msgstr ""

#: ../../quickstart.rst:28
msgid ""
"First we imported the :class:`~flask.Flask` class. An instance of this "
"class will be our WSGI application."
msgstr ""

#: ../../quickstart.rst:30
msgid ""
"Next we create an instance of this class. The first argument is the name "
"of the application's module or package. ``__name__`` is a convenient "
"shortcut for this that is appropriate for most cases. This is needed so "
"that Flask knows where to look for resources such as templates and static"
" files."
msgstr ""

#: ../../quickstart.rst:35
msgid ""
"We then use the :meth:`~flask.Flask.route` decorator to tell Flask what "
"URL should trigger our function."
msgstr ""

#: ../../quickstart.rst:37
msgid ""
"The function returns the message we want to display in the user's "
"browser. The default content type is HTML, so HTML in the string will be "
"rendered by the browser."
msgstr ""

#: ../../quickstart.rst:41
msgid "HTML escaping"
msgstr ""

#: ../../quickstart.rst:43
msgid ""
"When returning HTML (the default response type in Flask), any user input "
"rendered in the output must be escaped to protect from injection attacks."
" HTML templates in Jinja, introduced later, will do this automatically. "
":func:`~markupsafe.escape`, shown above, can be used manually. It's "
"omitted for brevity in the examples below."
msgstr ""

#: ../../quickstart.rst:49
msgid ""
"Save it as :file:`hello.py` or something similar. Make sure to not call "
"your application :file:`flask.py` because this would conflict with Flask "
"itself."
msgstr ""

#: ../../quickstart.rst:53
msgid ""
"To run the application, use the :command:`flask` command or "
":command:`python -m flask`. Before you can do that you need to tell your "
"terminal the application to work with by exporting the ``FLASK_APP`` "
"environment variable:"
msgstr ""

#: ../../quickstart.rst:64
msgid ""
"If you are on Windows, the environment variable syntax depends on command"
" line interpreter. On Command Prompt::"
msgstr ""

#: ../../quickstart.rst:69
msgid "And on PowerShell::"
msgstr ""

#: ../../quickstart.rst:73
msgid ""
"This launches a very simple builtin server, which is good enough for "
"testing but probably not what you want to use in production. For "
"deployment options see :ref:`deployment`."
msgstr ""

#: ../../quickstart.rst:77
msgid ""
"Now head over to http://127.0.0.1:5000/, and you should see your hello "
"world greeting."
msgstr ""

#: ../../quickstart.rst:82
msgid "Externally Visible Server"
msgstr ""

#: ../../quickstart.rst:84
msgid ""
"If you run the server you will notice that the server is only accessible "
"from your own computer, not from any other in the network.  This is the "
"default because in debugging mode a user of the application can execute "
"arbitrary Python code on your computer."
msgstr ""

#: ../../quickstart.rst:89
msgid ""
"If you have the debugger disabled or trust the users on your network, you"
" can make the server publicly available simply by adding "
"``--host=0.0.0.0`` to the command line::"
msgstr ""

#: ../../quickstart.rst:95
msgid "This tells your operating system to listen on all public IPs."
msgstr ""

#: ../../quickstart.rst:99
msgid "What to do if the Server does not Start"
msgstr ""

#: ../../quickstart.rst:101
msgid ""
"In case the :command:`python -m flask` fails or :command:`flask` does not"
" exist, there are multiple reasons this might be the case. First of all "
"you need to look at the error message."
msgstr ""

#: ../../quickstart.rst:106
msgid "Old Version of Flask"
msgstr ""

#: ../../quickstart.rst:108
msgid ""
"Versions of Flask older than 0.11 use to have different ways to start the"
" application.  In short, the :command:`flask` command did not exist, and "
"neither did :command:`python -m flask`.  In that case you have two "
"options: either upgrade to newer Flask versions or have a look at "
":doc:`/server` to see the alternative method for running a server."
msgstr ""

#: ../../quickstart.rst:115
msgid "Invalid Import Name"
msgstr ""

#: ../../quickstart.rst:117
msgid ""
"The ``FLASK_APP`` environment variable is the name of the module to "
"import at :command:`flask run`. In case that module is incorrectly named "
"you will get an import error upon start (or if debug is enabled when you "
"navigate to the application). It will tell you what it tried to import "
"and why it failed."
msgstr ""

#: ../../quickstart.rst:122
msgid ""
"The most common reason is a typo or because you did not actually create "
"an ``app`` object."
msgstr ""

#: ../../quickstart.rst:128
msgid "Debug Mode"
msgstr ""

#: ../../quickstart.rst:130
msgid "(Want to just log errors and stack traces? See :ref:`application-errors`)"
msgstr ""

#: ../../quickstart.rst:132
msgid ""
"The :command:`flask` script is nice to start a local development server, "
"but you would have to restart it manually after each change to your code."
" That is not very nice and Flask can do better.  If you enable debug "
"support the server will reload itself on code changes, and it will also "
"provide you with a helpful debugger if things go wrong."
msgstr ""

#: ../../quickstart.rst:138
msgid ""
"To enable all development features (including debug mode) you can export "
"the ``FLASK_ENV`` environment variable and set it to ``development`` "
"before running the server::"
msgstr ""

#: ../../quickstart.rst:145
msgid "(On Windows you need to use ``set`` instead of ``export``.)"
msgstr ""

#: ../../quickstart.rst:147
msgid "This does the following things:"
msgstr ""

#: ../../quickstart.rst:149
msgid "it activates the debugger"
msgstr ""

#: ../../quickstart.rst:150
msgid "it activates the automatic reloader"
msgstr ""

#: ../../quickstart.rst:151
msgid "it enables the debug mode on the Flask application."
msgstr ""

#: ../../quickstart.rst:153
msgid ""
"You can also control debug mode separately from the environment by "
"exporting ``FLASK_DEBUG=1``."
msgstr ""

#: ../../quickstart.rst:156
msgid "There are more parameters that are explained in :doc:`/server`."
msgstr ""

#: ../../quickstart.rst:158
msgid "Attention"
msgstr ""

#: ../../quickstart.rst:160
msgid ""
"Even though the interactive debugger does not work in forking "
"environments (which makes it nearly impossible to use on production "
"servers), it still allows the execution of arbitrary code. This makes it "
"a major security risk and therefore it **must never be used on production"
" machines**."
msgstr ""

#: ../../quickstart.rst:165
msgid "Screenshot of the debugger in action:"
msgstr ""

#: ../../quickstart.rst:172
msgid ""
"More information on using the debugger can be found in the `Werkzeug "
"documentation`_."
msgstr ""

#: ../../quickstart.rst:177
msgid "Have another debugger in mind? See :ref:`working-with-debuggers`."
msgstr ""

#: ../../quickstart.rst:181
msgid "Routing"
msgstr ""

#: ../../quickstart.rst:183
msgid ""
"Modern web applications use meaningful URLs to help users. Users are more"
" likely to like a page and come back if the page uses a meaningful URL "
"they can remember and use to directly visit a page."
msgstr ""

#: ../../quickstart.rst:187
msgid ""
"Use the :meth:`~flask.Flask.route` decorator to bind a function to a URL."
" ::"
msgstr ""

#: ../../quickstart.rst:197
msgid ""
"You can do more! You can make parts of the URL dynamic and attach "
"multiple rules to a function."
msgstr ""

#: ../../quickstart.rst:201
msgid "Variable Rules"
msgstr ""

#: ../../quickstart.rst:203
msgid ""
"You can add variable sections to a URL by marking sections with "
"``<variable_name>``. Your function then receives the ``<variable_name>`` "
"as a keyword argument. Optionally, you can use a converter to specify the"
" type of the argument like ``<converter:variable_name>``. ::"
msgstr ""

#: ../../quickstart.rst:225
msgid "Converter types:"
msgstr ""

#: ../../quickstart.rst:228
msgid "``string``"
msgstr ""

#: ../../quickstart.rst:228
msgid "(default) accepts any text without a slash"
msgstr ""

#: ../../quickstart.rst:229
msgid "``int``"
msgstr ""

#: ../../quickstart.rst:229
msgid "accepts positive integers"
msgstr ""

#: ../../quickstart.rst:230
msgid "``float``"
msgstr ""

#: ../../quickstart.rst:230
msgid "accepts positive floating point values"
msgstr ""

#: ../../quickstart.rst:231
msgid "``path``"
msgstr ""

#: ../../quickstart.rst:231
msgid "like ``string`` but also accepts slashes"
msgstr ""

#: ../../quickstart.rst:232
msgid "``uuid``"
msgstr ""

#: ../../quickstart.rst:232
msgid "accepts UUID strings"
msgstr ""

#: ../../quickstart.rst:236
msgid "Unique URLs / Redirection Behavior"
msgstr ""

#: ../../quickstart.rst:238
msgid "The following two rules differ in their use of a trailing slash. ::"
msgstr ""

#: ../../quickstart.rst:248
msgid ""
"The canonical URL for the ``projects`` endpoint has a trailing slash. "
"It's similar to a folder in a file system. If you access the URL without "
"a trailing slash, Flask redirects you to the canonical URL with the "
"trailing slash."
msgstr ""

#: ../../quickstart.rst:253
msgid ""
"The canonical URL for the ``about`` endpoint does not have a trailing "
"slash. It's similar to the pathname of a file. Accessing the URL with a "
"trailing slash produces a 404 \"Not Found\" error. This helps keep URLs "
"unique for these resources, which helps search engines avoid indexing the"
" same page twice."
msgstr ""

#: ../../quickstart.rst:263
msgid "URL Building"
msgstr ""

#: ../../quickstart.rst:265
msgid ""
"To build a URL to a specific function, use the :func:`~flask.url_for` "
"function. It accepts the name of the function as its first argument and "
"any number of keyword arguments, each corresponding to a variable part of"
" the URL rule. Unknown variable parts are appended to the URL as query "
"parameters."
msgstr ""

#: ../../quickstart.rst:270
msgid ""
"Why would you want to build URLs using the URL reversing function "
":func:`~flask.url_for` instead of hard-coding them into your templates?"
msgstr ""

#: ../../quickstart.rst:273
msgid "Reversing is often more descriptive than hard-coding the URLs."
msgstr ""

#: ../../quickstart.rst:274
msgid ""
"You can change your URLs in one go instead of needing to remember to "
"manually change hard-coded URLs."
msgstr ""

#: ../../quickstart.rst:276
msgid ""
"URL building handles escaping of special characters and Unicode data "
"transparently."
msgstr ""

#: ../../quickstart.rst:278
msgid ""
"The generated paths are always absolute, avoiding unexpected behavior of "
"relative paths in browsers."
msgstr ""

#: ../../quickstart.rst:280
msgid ""
"If your application is placed outside the URL root, for example, in "
"``/myapplication`` instead of ``/``, :func:`~flask.url_for` properly "
"handles that for you."
msgstr ""

#: ../../quickstart.rst:284
msgid ""
"For example, here we use the :meth:`~flask.Flask.test_request_context` "
"method to try out :func:`~flask.url_for`. "
":meth:`~flask.Flask.test_request_context` tells Flask to behave as though"
" it's handling a request even while we use a Python shell. See :ref"
":`context-locals`."
msgstr ""

#: ../../quickstart.rst:320
msgid "HTTP Methods"
msgstr ""

#: ../../quickstart.rst:322
msgid ""
"Web applications use different HTTP methods when accessing URLs. You "
"should familiarize yourself with the HTTP methods as you work with Flask."
" By default, a route only answers to ``GET`` requests. You can use the "
"``methods`` argument of the :meth:`~flask.Flask.route` decorator to "
"handle different HTTP methods. ::"
msgstr ""

#: ../../quickstart.rst:337
msgid ""
"If ``GET`` is present, Flask automatically adds support for the ``HEAD`` "
"method and handles ``HEAD`` requests according to the `HTTP RFC`_. "
"Likewise, ``OPTIONS`` is automatically implemented for you."
msgstr ""

#: ../../quickstart.rst:344
msgid "Static Files"
msgstr ""

#: ../../quickstart.rst:346
msgid ""
"Dynamic web applications also need static files.  That's usually where "
"the CSS and JavaScript files are coming from.  Ideally your web server is"
" configured to serve them for you, but during development Flask can do "
"that as well.  Just create a folder called :file:`static` in your package"
" or next to your module and it will be available at ``/static`` on the "
"application."
msgstr ""

#: ../../quickstart.rst:352
msgid ""
"To generate URLs for static files, use the special ``'static'`` endpoint "
"name::"
msgstr ""

#: ../../quickstart.rst:356
msgid "The file has to be stored on the filesystem as :file:`static/style.css`."
msgstr ""

#: ../../quickstart.rst:359
msgid "Rendering Templates"
msgstr ""

#: ../../quickstart.rst:361
msgid ""
"Generating HTML from within Python is not fun, and actually pretty "
"cumbersome because you have to do the HTML escaping on your own to keep "
"the application secure.  Because of that Flask configures the `Jinja2 "
"<https://palletsprojects.com/p/jinja/>`_ template engine for you "
"automatically."
msgstr ""

#: ../../quickstart.rst:366
msgid ""
"To render a template you can use the :func:`~flask.render_template` "
"method.  All you have to do is provide the name of the template and the "
"variables you want to pass to the template engine as keyword arguments. "
"Here's a simple example of how to render a template::"
msgstr ""

#: ../../quickstart.rst:378
msgid ""
"Flask will look for templates in the :file:`templates` folder.  So if "
"your application is a module, this folder is next to that module, if it's"
" a package it's actually inside your package:"
msgstr ""

#: ../../quickstart.rst:382
msgid "**Case 1**: a module::"
msgstr ""

#: ../../quickstart.rst:388
msgid "**Case 2**: a package::"
msgstr ""

#: ../../quickstart.rst:395
msgid ""
"For templates you can use the full power of Jinja2 templates.  Head over "
"to the official `Jinja2 Template Documentation "
"<https://jinja.palletsprojects.com/templates/>`_ for more information."
msgstr ""

#: ../../quickstart.rst:399
msgid "Here is an example template:"
msgstr ""

#: ../../quickstart.rst:411
msgid ""
"Inside templates you also have access to the :class:`~flask.request`, "
":class:`~flask.session` and :class:`~flask.g` [#]_ objects as well as the"
" :func:`~flask.get_flashed_messages` function."
msgstr ""

#: ../../quickstart.rst:415
msgid ""
"Templates are especially useful if inheritance is used.  If you want to "
"know how that works, head over to the :ref:`template-inheritance` pattern"
" documentation.  Basically template inheritance makes it possible to keep"
" certain elements on each page (like header, navigation and footer)."
msgstr ""

#: ../../quickstart.rst:420
msgid ""
"Automatic escaping is enabled, so if ``name`` contains HTML it will be "
"escaped automatically.  If you can trust a variable and you know that it "
"will be safe HTML (for example because it came from a module that "
"converts wiki markup to HTML) you can mark it as safe by using the "
":class:`~markupsafe.Markup` class or by using the ``|safe`` filter in the"
" template.  Head over to the Jinja 2 documentation for more examples."
msgstr ""

#: ../../quickstart.rst:427
msgid ""
"Here is a basic introduction to how the :class:`~markupsafe.Markup` class"
" works::"
msgstr ""

#: ../../quickstart.rst:439
msgid ""
"Autoescaping is no longer enabled for all templates.  The following "
"extensions for templates trigger autoescaping: ``.html``, ``.htm``, "
"``.xml``, ``.xhtml``.  Templates loaded from a string will have "
"autoescaping disabled."
msgstr ""

#: ../../quickstart.rst:444
msgid ""
"Unsure what that :class:`~flask.g` object is? It's something in which you"
" can store information for your own needs, check the documentation of "
"that object (:class:`~flask.g`) and the :ref:`sqlite3` for more "
"information."
msgstr ""

#: ../../quickstart.rst:451
msgid "Accessing Request Data"
msgstr ""

#: ../../quickstart.rst:453
msgid ""
"For web applications it's crucial to react to the data a client sends to "
"the server.  In Flask this information is provided by the global "
":class:`~flask.request` object.  If you have some experience with Python "
"you might be wondering how that object can be global and how Flask "
"manages to still be threadsafe.  The answer is context locals:"
msgstr ""

#: ../../quickstart.rst:463
msgid "Context Locals"
msgstr ""

#: ../../quickstart.rst:465
msgid "Insider Information"
msgstr ""

#: ../../quickstart.rst:467
msgid ""
"If you want to understand how that works and how you can implement tests "
"with context locals, read this section, otherwise just skip it."
msgstr ""

#: ../../quickstart.rst:470
msgid ""
"Certain objects in Flask are global objects, but not of the usual kind. "
"These objects are actually proxies to objects that are local to a "
"specific context.  What a mouthful.  But that is actually quite easy to "
"understand."
msgstr ""

#: ../../quickstart.rst:474
msgid ""
"Imagine the context being the handling thread.  A request comes in and "
"the web server decides to spawn a new thread (or something else, the "
"underlying object is capable of dealing with concurrency systems other "
"than threads).  When Flask starts its internal request handling it "
"figures out that the current thread is the active context and binds the "
"current application and the WSGI environments to that context (thread). "
"It does that in an intelligent way so that one application can invoke "
"another application without breaking."
msgstr ""

#: ../../quickstart.rst:483
msgid ""
"So what does this mean to you?  Basically you can completely ignore that "
"this is the case unless you are doing something like unit testing.  You "
"will notice that code which depends on a request object will suddenly "
"break because there is no request object.  The solution is creating a "
"request object yourself and binding it to the context.  The easiest "
"solution for unit testing is to use the "
":meth:`~flask.Flask.test_request_context` context manager.  In "
"combination with the ``with`` statement it will bind a test request so "
"that you can interact with it.  Here is an example::"
msgstr ""

#: ../../quickstart.rst:500
msgid ""
"The other possibility is passing a whole WSGI environment to the "
":meth:`~flask.Flask.request_context` method::"
msgstr ""

#: ../../quickstart.rst:507
msgid "The Request Object"
msgstr ""

#: ../../quickstart.rst:509
msgid ""
"The request object is documented in the API section and we will not cover"
" it here in detail (see :class:`~flask.Request`). Here is a broad "
"overview of some of the most common operations.  First of all you have to"
" import it from the ``flask`` module::"
msgstr ""

#: ../../quickstart.rst:516
msgid ""
"The current request method is available by using the "
":attr:`~flask.Request.method` attribute.  To access form data (data "
"transmitted in a ``POST`` or ``PUT`` request) you can use the "
":attr:`~flask.Request.form` attribute.  Here is a full example of the two"
" attributes mentioned above::"
msgstr ""

#: ../../quickstart.rst:535
msgid ""
"What happens if the key does not exist in the ``form`` attribute?  In "
"that case a special :exc:`KeyError` is raised.  You can catch it like a "
"standard :exc:`KeyError` but if you don't do that, a HTTP 400 Bad Request"
" error page is shown instead.  So for many situations you don't have to "
"deal with that problem."
msgstr ""

#: ../../quickstart.rst:541
msgid ""
"To access parameters submitted in the URL (``?key=value``) you can use "
"the :attr:`~flask.Request.args` attribute::"
msgstr ""

#: ../../quickstart.rst:546
msgid ""
"We recommend accessing URL parameters with `get` or by catching the "
":exc:`KeyError` because users might change the URL and presenting them a "
"400 bad request page in that case is not user friendly."
msgstr ""

#: ../../quickstart.rst:550
msgid ""
"For a full list of methods and attributes of the request object, head "
"over to the :class:`~flask.Request` documentation."
msgstr ""

#: ../../quickstart.rst:555
msgid "File Uploads"
msgstr ""

#: ../../quickstart.rst:557
msgid ""
"You can handle uploaded files with Flask easily.  Just make sure not to "
"forget to set the ``enctype=\"multipart/form-data\"`` attribute on your "
"HTML form, otherwise the browser will not transmit your files at all."
msgstr ""

#: ../../quickstart.rst:561
msgid ""
"Uploaded files are stored in memory or at a temporary location on the "
"filesystem.  You can access those files by looking at the "
":attr:`~flask.request.files` attribute on the request object.  Each "
"uploaded file is stored in that dictionary.  It behaves just like a "
"standard Python :class:`file` object, but it also has a "
":meth:`~werkzeug.datastructures.FileStorage.save` method that allows you "
"to store that file on the filesystem of the server. Here is a simple "
"example showing how that works::"
msgstr ""

#: ../../quickstart.rst:579
msgid ""
"If you want to know how the file was named on the client before it was "
"uploaded to your application, you can access the "
":attr:`~werkzeug.datastructures.FileStorage.filename` attribute. However "
"please keep in mind that this value can be forged so never ever trust "
"that value.  If you want to use the filename of the client to store the "
"file on the server, pass it through the "
":func:`~werkzeug.utils.secure_filename` function that Werkzeug provides "
"for you::"
msgstr ""

#: ../../quickstart.rst:597
msgid "For some better examples, checkout the :ref:`uploading-files` pattern."
msgstr ""

#: ../../quickstart.rst:600
msgid "Cookies"
msgstr ""

#: ../../quickstart.rst:602
msgid ""
"To access cookies you can use the :attr:`~flask.Request.cookies` "
"attribute.  To set cookies you can use the "
":attr:`~flask.Response.set_cookie` method of response objects.  The "
":attr:`~flask.Request.cookies` attribute of request objects is a "
"dictionary with all the cookies the client transmits.  If you want to use"
" sessions, do not use the cookies directly but instead use the "
":ref:`sessions` in Flask that add some security on top of cookies for "
"you."
msgstr ""

#: ../../quickstart.rst:610
msgid "Reading cookies::"
msgstr ""

#: ../../quickstart.rst:620
msgid "Storing cookies::"
msgstr ""

#: ../../quickstart.rst:630
msgid ""
"Note that cookies are set on response objects.  Since you normally just "
"return strings from the view functions Flask will convert them into "
"response objects for you.  If you explicitly want to do that you can use "
"the :meth:`~flask.make_response` function and then modify it."
msgstr ""

#: ../../quickstart.rst:635
msgid ""
"Sometimes you might want to set a cookie at a point where the response "
"object does not exist yet.  This is possible by utilizing the :ref"
":`deferred-callbacks` pattern."
msgstr ""

#: ../../quickstart.rst:639
msgid "For this also see :ref:`about-responses`."
msgstr ""

#: ../../quickstart.rst:642
msgid "Redirects and Errors"
msgstr ""

#: ../../quickstart.rst:644
msgid ""
"To redirect a user to another endpoint, use the :func:`~flask.redirect` "
"function; to abort a request early with an error code, use the "
":func:`~flask.abort` function::"
msgstr ""

#: ../../quickstart.rst:659
msgid ""
"This is a rather pointless example because a user will be redirected from"
" the index to a page they cannot access (401 means access denied) but it "
"shows how that works."
msgstr ""

#: ../../quickstart.rst:663
msgid ""
"By default a black and white error page is shown for each error code.  If"
" you want to customize the error page, you can use the "
":meth:`~flask.Flask.errorhandler` decorator::"
msgstr ""

#: ../../quickstart.rst:673
msgid ""
"Note the ``404`` after the :func:`~flask.render_template` call.  This "
"tells Flask that the status code of that page should be 404 which means "
"not found.  By default 200 is assumed which translates to: all went well."
msgstr ""

#: ../../quickstart.rst:677
msgid "See :ref:`error-handlers` for more details."
msgstr ""

#: ../../quickstart.rst:682
msgid "About Responses"
msgstr ""

#: ../../quickstart.rst:684
msgid ""
"The return value from a view function is automatically converted into a "
"response object for you. If the return value is a string it's converted "
"into a response object with the string as response body, a ``200 OK`` "
"status code and a :mimetype:`text/html` mimetype. If the return value is "
"a dict, :func:`jsonify` is called to produce a response. The logic that "
"Flask applies to converting return values into response objects is as "
"follows:"
msgstr ""

#: ../../quickstart.rst:692
msgid ""
"If a response object of the correct type is returned it's directly "
"returned from the view."
msgstr ""

#: ../../quickstart.rst:694
msgid ""
"If it's a string, a response object is created with that data and the "
"default parameters."
msgstr ""

#: ../../quickstart.rst:696
msgid "If it's a dict, a response object is created using ``jsonify``."
msgstr ""

#: ../../quickstart.rst:697
msgid ""
"If a tuple is returned the items in the tuple can provide extra "
"information. Such tuples have to be in the form ``(response, status)``, "
"``(response, headers)``, or ``(response, status, headers)``. The "
"``status`` value will override the status code and ``headers`` can be a "
"list or dictionary of additional header values."
msgstr ""

#: ../../quickstart.rst:703
msgid ""
"If none of that works, Flask will assume the return value is a valid WSGI"
" application and convert that into a response object."
msgstr ""

#: ../../quickstart.rst:706
msgid ""
"If you want to get hold of the resulting response object inside the view "
"you can use the :func:`~flask.make_response` function."
msgstr ""

#: ../../quickstart.rst:709
msgid "Imagine you have a view like this::"
msgstr ""

#: ../../quickstart.rst:717
msgid ""
"You just need to wrap the return expression with "
":func:`~flask.make_response` and get the response object to modify it, "
"then return it::"
msgstr ""

#: ../../quickstart.rst:731
msgid "APIs with JSON"
msgstr ""

#: ../../quickstart.rst:733
msgid ""
"A common response format when writing an API is JSON. It's easy to get "
"started writing such an API with Flask. If you return a ``dict`` from a "
"view, it will be converted to a JSON response."
msgstr ""

#: ../../quickstart.rst:748
msgid ""
"Depending on your API design, you may want to create JSON responses for "
"types other than ``dict``. In that case, use the "
":func:`~flask.json.jsonify` function, which will serialize any supported "
"JSON data type. Or look into Flask community extensions that support more"
" complex applications."
msgstr ""

#: ../../quickstart.rst:767
msgid "Sessions"
msgstr ""

#: ../../quickstart.rst:769
msgid ""
"In addition to the request object there is also a second object called "
":class:`~flask.session` which allows you to store information specific to"
" a user from one request to the next.  This is implemented on top of "
"cookies for you and signs the cookies cryptographically.  What this means"
" is that the user could look at the contents of your cookie but not "
"modify it, unless they know the secret key used for signing."
msgstr ""

#: ../../quickstart.rst:776
msgid ""
"In order to use sessions you have to set a secret key.  Here is how "
"sessions work::"
msgstr ""

#: ../../quickstart.rst:808
msgid "How to generate good secret keys"
msgstr ""

#: ../../quickstart.rst:810
msgid ""
"A secret key should be as random as possible. Your operating system has "
"ways to generate pretty random data based on a cryptographic random "
"generator. Use the following command to quickly generate a value for "
":attr:`Flask.secret_key` (or :data:`SECRET_KEY`)::"
msgstr ""

#: ../../quickstart.rst:818
msgid ""
"A note on cookie-based sessions: Flask will take the values you put into "
"the session object and serialize them into a cookie.  If you are finding "
"some values do not persist across requests, cookies are indeed enabled, "
"and you are not getting a clear error message, check the size of the "
"cookie in your page responses compared to the size supported by web "
"browsers."
msgstr ""

#: ../../quickstart.rst:824
msgid ""
"Besides the default client-side based sessions, if you want to handle "
"sessions on the server-side instead, there are several Flask extensions "
"that support this."
msgstr ""

#: ../../quickstart.rst:829
msgid "Message Flashing"
msgstr ""

#: ../../quickstart.rst:831
msgid ""
"Good applications and user interfaces are all about feedback.  If the "
"user does not get enough feedback they will probably end up hating the "
"application.  Flask provides a really simple way to give feedback to a "
"user with the flashing system.  The flashing system basically makes it "
"possible to record a message at the end of a request and access it on the"
" next (and only the next) request.  This is usually combined with a "
"layout template to expose the message."
msgstr ""

#: ../../quickstart.rst:839
msgid ""
"To flash a message use the :func:`~flask.flash` method, to get hold of "
"the messages you can use :func:`~flask.get_flashed_messages` which is "
"also available in the templates.  Check out the :ref:`message-flashing-"
"pattern` for a full example."
msgstr ""

#: ../../quickstart.rst:845
msgid "Logging"
msgstr ""

#: ../../quickstart.rst:849
msgid ""
"Sometimes you might be in a situation where you deal with data that "
"should be correct, but actually is not.  For example you may have some "
"client-side code that sends an HTTP request to the server but it's "
"obviously malformed.  This might be caused by a user tampering with the "
"data, or the client code failing.  Most of the time it's okay to reply "
"with ``400 Bad Request`` in that situation, but sometimes that won't do "
"and the code has to continue working."
msgstr ""

#: ../../quickstart.rst:857
msgid ""
"You may still want to log that something fishy happened.  This is where "
"loggers come in handy.  As of Flask 0.3 a logger is preconfigured for you"
" to use."
msgstr ""

#: ../../quickstart.rst:861
msgid "Here are some example log calls::"
msgstr ""

#: ../../quickstart.rst:867
msgid ""
"The attached :attr:`~flask.Flask.logger` is a standard logging "
":class:`~logging.Logger`, so head over to the official :mod:`logging` "
"docs for more information."
msgstr ""

#: ../../quickstart.rst:871
msgid "Read more on :ref:`application-errors`."
msgstr ""

#: ../../quickstart.rst:874
msgid "Hooking in WSGI Middleware"
msgstr ""

#: ../../quickstart.rst:876
msgid ""
"To add WSGI middleware to your Flask application, wrap the application's "
"``wsgi_app`` attribute. For example, to apply Werkzeug's "
":class:`~werkzeug.middlware.proxy_fix.ProxyFix` middleware for running "
"behind Nginx:"
msgstr ""

#: ../../quickstart.rst:886
msgid ""
"Wrapping ``app.wsgi_app`` instead of ``app`` means that ``app`` still "
"points at your Flask application, not at the middleware, so you can "
"continue to use and configure ``app`` directly."
msgstr ""

#: ../../quickstart.rst:891
msgid "Using Flask Extensions"
msgstr ""

#: ../../quickstart.rst:893
msgid ""
"Extensions are packages that help you accomplish common tasks. For "
"example, Flask-SQLAlchemy provides SQLAlchemy support that makes it "
"simple and easy to use with Flask."
msgstr ""

#: ../../quickstart.rst:897
msgid "For more on Flask extensions, have a look at :ref:`extensions`."
msgstr ""

#: ../../quickstart.rst:900
msgid "Deploying to a Web Server"
msgstr ""

#: ../../quickstart.rst:902
msgid "Ready to deploy your new Flask app? Go to :ref:`deployment`."
msgstr ""

