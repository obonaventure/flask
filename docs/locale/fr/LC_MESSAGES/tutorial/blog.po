# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-12 16:28+0100\n"
"PO-Revision-Date: 2020-03-18 11:58+0100\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: fr\n"
"X-Generator: Poedit 2.2.1\n"

#: ../../tutorial/blog.rst:4
msgid "Blog Blueprint"
msgstr "Le plan du blog"

#: ../../tutorial/blog.rst:6
msgid ""
"You'll use the same techniques you learned about when writing the "
"authentication blueprint to write the blog blueprint. The blog should "
"list all posts, allow logged in users to create posts, and allow the "
"author of a post to edit or delete it."
msgstr ""
"Vous utiliserez les techniques que nous avons vues pour écrire le plan "
"d'authentification pour écrire le plan du blog. Le blog doit présenter "
"tous les messages, permettre aux utilisateurs qui sont connectés de "
"créer des messages et à l'auteur d'un message de l'éditer ou l'effacer."

#: ../../tutorial/blog.rst:11
msgid ""
"As you implement each view, keep the development server running. As you "
"save your changes, try going to the URL in your browser and testing them "
"out."
msgstr ""
"Laissez le serveur de développement tourner pendant que vous implémentez "
"chaque vue. Cela vous permettra d'aller directement sur l'URL "
"correspondant sur votre navigateur et de le tester directement."

#: ../../tutorial/blog.rst:16
msgid "The Blueprint"
msgstr "Le plan"

#: ../../tutorial/blog.rst:18
msgid "Define the blueprint and register it in the application factory."
msgstr "Définissez le plan et enregistrez-le dans l'usine à applications."

#: ../../tutorial/blog.rst:20 ../../tutorial/blog.rst:76
#: ../../tutorial/blog.rst:142 ../../tutorial/blog.rst:198
#: ../../tutorial/blog.rst:228 ../../tutorial/blog.rst:320
msgid "``flaskr/blog.py``"
msgstr "``flaskr/blog.py``"

#: ../../tutorial/blog.rst:33
msgid ""
"Import and register the blueprint from the factory using :meth:`app."
"register_blueprint() <Flask.register_blueprint>`. Place the new code at "
"the end of the factory function before returning the app."
msgstr ""
"Vous pouvez importer et enregistrer le plan de l'usine à applications en "
"utilisant  :meth:`app.register_blueprint() <Flask.register_blueprint>`. "
"Pour cela, il vous suffit de placer votre code à la fin de celui de "
"l'usine à applications avant de retourner l'application."

#: ../../tutorial/blog.rst:37
msgid "``flaskr/__init__.py``"
msgstr "``flaskr/__init__.py``"

#: ../../tutorial/blog.rst:51
msgid ""
"Unlike the auth blueprint, the blog blueprint does not have a "
"``url_prefix``. So the ``index`` view will be at ``/``, the ``create`` "
"view at ``/create``, and so on. The blog is the main feature of Flaskr, "
"so it makes sense that the blog index will be the main index."
msgstr ""
"Contrairement au plan authentification, le plan du blog n'utilise pas "
"d'``url_prefix``. Pour cette raison, la vue ``index`` sera à ``/``, la "
"vue ``create`` à ``/create`` etc. Le blog est la fonctionnalité "
"principale de Flaskr, et donc c'est logique que l'index du blog se "
"trouve à la racine du site."

#: ../../tutorial/blog.rst:56
msgid ""
"However, the endpoint for the ``index`` view defined below will be "
"``blog.index``. Some of the authentication views referred to a plain "
"``index`` endpoint. :meth:`app.add_url_rule() <Flask.add_url_rule>` "
"associates the endpoint name ``'index'`` with the ``/`` url so that "
"``url_for('index')`` or ``url_for('blog.index')`` will both work, "
"generating the same ``/`` URL either way."
msgstr ""
"Cependant,le point final de la vue ``index`` définie ci-dessous sera "
"``blog.index``. Certaines des vues d'authentification faisaient "
"référence au point final ``index``. :meth:`app.add_url_rule() <Flask."
"add_url_rule>` associe le nom du point final ``'index'`` avec l'URL ``/"
"`` de façon à ce que tant ``url_for('index')`` que ``url_for('blog."
"index')`` fonctionnent et génèrent toutes les deux l'URL ``/``."

#: ../../tutorial/blog.rst:63
msgid ""
"In another application you might give the blog blueprint a "
"``url_prefix`` and define a separate ``index`` view in the application "
"factory, similar to the ``hello`` view. Then the ``index`` and ``blog."
"index`` endpoints and URLs would be different."
msgstr ""
"Dans d'autres applications, vous pourriez devoir donner au plan blog un "
"``url_prefix`` et définir une vue ``index`` séparée dans l'usine à "
"applications de la même façon que pour la vue ``hello``. De cette façon, "
"les points finaux ``index`` et ``blog.index`` seraient différents."

#: ../../tutorial/blog.rst:70
msgid "Index"
msgstr "Index"

#: ../../tutorial/blog.rst:72
msgid ""
"The index will show all of the posts, most recent first. A ``JOIN`` is "
"used so that the author information from the ``user`` table is available "
"in the result."
msgstr ""
"L'index va présenter tous les messages en commençant pas le plus récent. "
"une requête SQL de type ``JOIN`` est utilisée de façon à ce que "
"l'information concernant l'auteur qui provient de la table ``user`` soit "
"incluse dans le résultat."

#: ../../tutorial/blog.rst:89
msgid "``flaskr/templates/blog/index.html``"
msgstr "``flaskr/templates/blog/index.html``"

#: ../../tutorial/blog.rst:121
msgid ""
"When a user is logged in, the ``header`` block adds a link to the "
"``create`` view. When the user is the author of a post, they'll see an "
"\"Edit\" link to the ``update`` view for that post. ``loop.last`` is a "
"special variable available inside `Jinja for loops`_. It's used to "
"display a line after each post except the last one, to visually separate "
"them."
msgstr ""
"Lorsque l'utilisateur est authentifié, le bloc ``header`` ajoute un lien "
"dans la vue ``create``. Lorsque l'utilisateur est auteur d'un message, "
"il verra le lien ``update`` dans la vue relative à ce message. ``loop."
"last`` est une variable spéciale de `Jinja for loops`_. Elle est "
"utilisée pour afficher une ligne après chaque message, sauf le dernier, "
"de façon à les séparer visuellement."

#: ../../tutorial/blog.rst:132
msgid "Create"
msgstr "Create"

#: ../../tutorial/blog.rst:134
msgid ""
"The ``create`` view works the same as the auth ``register`` view. Either "
"the form is displayed, or the posted data is validated and the post is "
"added to the database or an error is shown."
msgstr ""
"La vue ``Create`` fonctionne de la même façon que la vue ``register``. "
"Soit le formulaire est affiché, soit le message posté est validé et il "
"ajouté à la base de données ou une erreur est affichée."

#: ../../tutorial/blog.rst:138
msgid ""
"The ``login_required`` decorator you wrote earlier is used on the blog "
"views. A user must be logged in to visit these views, otherwise they "
"will be redirected to the login page."
msgstr ""
"Le décorateur ``login_required`` que vous avez écrit précédemment est "
"utilisé dans les vues du blog. Un utilisateur doit être authentifié pour "
"visiter ces vues, sinon il est redirigé vers la page de login."

#: ../../tutorial/blog.rst:170
msgid "``flaskr/templates/blog/create.html``"
msgstr "``flaskr/templates/blog/create.html``"

#: ../../tutorial/blog.rst:191
msgid "Update"
msgstr "Update"

#: ../../tutorial/blog.rst:193
msgid ""
"Both the ``update`` and ``delete`` views will need to fetch a ``post`` "
"by ``id`` and check if the author matches the logged in user. To avoid "
"duplicating code, you can write a function to get the ``post`` and call "
"it from each view."
msgstr ""
"Les vues ``update`` et ``delete`` doivent récupérer un ``post`` sur base "
"de son ``id`` et vérifier si l'auteur correspond à l'utilisateur "
"connecté. Pour éviter de dupliquer du code, vous pouvez écrire une "
"fonction pour récupérer un ``post`` et l'appeler depuis chaque vue."

#: ../../tutorial/blog.rst:217
msgid ""
":func:`abort` will raise a special exception that returns an HTTP status "
"code. It takes an optional message to show with the error, otherwise a "
"default message is used. ``404`` means \"Not Found\", and ``403`` means "
"\"Forbidden\". (``401`` means \"Unauthorized\", but you redirect to the "
"login page instead of returning that status.)"
msgstr ""
":func:`abort` va lancer une exception spécial qui retourne un code de "
"statut HTTP. Cette fonction prend en argument optionnel un message à "
"présenter avec l'erreur, sinon un message par défaut est utilisé. "
"``404`` signifie que l'URL n'a pas été trouve (\"Not Found\") et ``403`` "
"signifie interdit (\"Forbidden\"). L'erreur ``401`` signifie non-"
"autorisé (\"Unauthorized\"), mais dans ce cas vous redirigez déjà vers "
"la page de login plutôt que de retourner le statut HTTP."

#: ../../tutorial/blog.rst:223
msgid ""
"The ``check_author`` argument is defined so that the function can be "
"used to get a ``post`` without checking the author. This would be useful "
"if you wrote a view to show an individual post on a page, where the user "
"doesn't matter because they're not modifying the post."
msgstr ""
"L'argument ``check_author`` est défini de façon à ce que la fonction "
"puisse être utilisée pour récupérer un ``post`` dans devoir valider "
"l'utilisateur. Cela peut être utile si vous écrivez une vue permettant "
"de voir un message individuel dans une page où l'utilisateur n'est pas "
"important car il ne peut pas modifier le message."

#: ../../tutorial/blog.rst:258
msgid ""
"Unlike the views you've written so far, the ``update`` function takes an "
"argument, ``id``. That corresponds to the ``<int:id>`` in the route. A "
"real URL will look like ``/1/update``. Flask will capture the ``1``, "
"ensure it's an :class:`int`, and pass it as the ``id`` argument. If you "
"don't specify ``int:`` and instead do ``<id>``, it will be a string. To "
"generate a URL to the update page, :func:`url_for` needs to be passed "
"the ``id`` so it knows what to fill in: ``url_for('blog.update', "
"id=post['id'])``. This is also in the ``index.html`` file above."
msgstr ""
"Contrairement aux vues que vous avez écrites jusque maintenant, la "
"fonction ``update`` prend un argument, ``id``. Cela correspond à ``<int:"
"id>`` dans la route. Un URL réel ressemblera à ``/1/update``. Flask "
"capturera le ``1``, vérifiera que c'est un :class:`int` et le passera "
"via l'argument ``id``. Si vous ne spécifiez pas ``int:`` et indiquez "
"simplement ``<id>``, ce sera une chaîne de caractères. Pour générer un "
"URL pour la page update, l'argument ``id`` doit être passé à la "
"fonction :func:`url_for` pour qu'elle sache comment remplir "
"``url_for('blog.update', id=post['id'])``. C'est aussi le cas pour le "
"fichier ``index.html`` ci-dessus."

#: ../../tutorial/blog.rst:268
msgid ""
"The ``create`` and ``update`` views look very similar. The main "
"difference is that the ``update`` view uses a ``post`` object and an "
"``UPDATE`` query instead of an ``INSERT``. With some clever refactoring, "
"you could use one view and template for both actions, but for the "
"tutorial it's clearer to keep them separate."
msgstr ""
"Les vues ``create`` et ``update`` sont très similaires. La différence "
"principale est que la vue ``update`` utilise un objet ``post``and une "
"requête SQL ``UPDATE`` plutôt qu'une requête ``INSERT``. Avec une bonne "
"réorganisation du code, vous pourriez utiliser une vue et des templaces "
"pour ces deux actions, mais pour le tutoriel, c'est plus simple de "
"garder les deux séparés."

#: ../../tutorial/blog.rst:274
msgid "``flaskr/templates/blog/update.html``"
msgstr "``url_for('blog.update', id=post['id'])``"

#: ../../tutorial/blog.rst:298
msgid ""
"This template has two forms. The first posts the edited data to the "
"current page (``/<id>/update``). The other form contains only a button "
"and specifies an ``action`` attribute that posts to the delete view "
"instead. The button uses some JavaScript to show a confirmation dialog "
"before submitting."
msgstr ""
"Ce template a deux formulaires. Le premier poste le message modifié sur "
"la page courante (``/<id>/update``). L'autre formulaire contient "
"uniquement un bouton et spécifie un attribut ``action`` qui poste sur la "
"vue ``delete`` à la place. Ce bouton utilise un peu de javascript pour "
"montrer une boîte de dialogue qui demande à l'utilisateur de confirmer "
"avant de soumettre."

#: ../../tutorial/blog.rst:304
msgid ""
"The pattern ``{{ request.form['title'] or post['title'] }}`` is used to "
"choose what data appears in the form. When the form hasn't been "
"submitted, the original ``post`` data appears, but if invalid form data "
"was posted you want to display that so the user can fix the error, so "
"``request.form`` is used instead. :data:`request` is another variable "
"that's automatically available in templates."
msgstr ""
"Le motif (pattern) ``{{ request.form['title'] or post['title'] }}`` est "
"utilisé pour choisir entre quelle donné apparaît dans le formulaire. "
"Tant que le formulaire n'a pas été soumis, c'est le ``post`` original "
"qui apparaît, mais si le formulaire contient une information invalide, "
"vous voulez la présenter de façon à ce qu'il puisse corriger son erreur. "
"Cela se fait en utilisant ``request.form``. :data:`request` est une "
"autre variable qui est automatiquement disponible dans les templates."

#: ../../tutorial/blog.rst:313
msgid "Delete"
msgstr "Delete"

#: ../../tutorial/blog.rst:315
msgid ""
"The delete view doesn't have its own template, the delete button is part "
"of ``update.html`` and posts to the ``/<id>/delete`` URL. Since there is "
"no template, it will only handle the ``POST`` method and then redirect "
"to the ``index`` view."
msgstr ""
"La vue `delete` n'utilise pas de template spécifique, le bouton `delete` "
"est inclus dans ``update.html`` et poste sur l'URL ``/<id>/delete``. "
"Comme il n'y pas pas de template, elle ne supporte que la méthode "
"``POST`` et ensuite redirige vers la vue ``index``."

#: ../../tutorial/blog.rst:332
msgid ""
"Congratulations, you've now finished writing your application! Take some "
"time to try out everything in the browser. However, there's still more "
"to do before the project is complete."
msgstr ""
"Félicitations, vous avez fini d'écrire votre application! Prenez un peu "
"de temps pour tout essayer dans votre navigateur. Votre travail n'est "
"pas encore complètement terminé, il reste un peu à faire pour le "
"finaliser."

#: ../../tutorial/blog.rst:336
msgid "Continue to :doc:`install`."
msgstr "Continuez à lire le document :doc:`install`."
