# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010 Pallets
# This file is distributed under the same license as the Flask package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: Flask 1.1.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-12 16:28+0100\n"
"PO-Revision-Date: 2020-03-18 22:18+0100\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: fr\n"
"X-Generator: Poedit 2.2.1\n"

#: ../../tutorial/database.rst:4
msgid "Define and Access the Database"
msgstr "Construire et accéder à la base de données"

#: ../../tutorial/database.rst:6
msgid ""
"The application will use a `SQLite`_ database to store users and posts. "
"Python comes with built-in support for SQLite in the :mod:`sqlite3` "
"module."
msgstr ""
"L'application va utiliser une base de données `SQLite`_ pour stocker les "
"utilisateurs et les messages du blog. Python intègre un support pour "
"SQLite dans le module :mod:`sqlite3`."

#: ../../tutorial/database.rst:10
msgid ""
"SQLite is convenient because it doesn't require setting up a separate "
"database server and is built-in to Python. However, if concurrent "
"requests try to write to the database at the same time, they will slow "
"down as each write happens sequentially. Small applications won't notice "
"this. Once you become big, you may want to switch to a different "
"database."
msgstr ""
"SQLite est intéressant car il peut s'utiliser sans nécessiter "
"l'installation d'un serveur de base de données séparés et il est "
"directement intégré à Python. Cependant, si plusieurs accès en écriture "
"à la base de données se font en même temps, l'application va ralentir "
"car ceux-ci doivent être séquentiels. Pour de petites applications, ce "
"n'est pas important. Si votre application prend de l'ampleur et "
"nécessite beaucoup d'écritures, vous devrez peut-être passer à une autre "
"base de données."

#: ../../tutorial/database.rst:17
msgid ""
"The tutorial doesn't go into detail about SQL. If you are not familiar "
"with it, the SQLite docs describe the `language`_."
msgstr ""
"Ce tutoriel ne rentre pas dans les détails du langage SQL. Si vous "
"n'êtes pas familiers avec celui-ci, il est décrit dans la documentation "
"de SQL, voir le document `language`_."

#: ../../tutorial/database.rst:25
msgid "Connect to the Database"
msgstr "Connection à la base de données"

#: ../../tutorial/database.rst:27
msgid ""
"The first thing to do when working with a SQLite database (and most "
"other Python database libraries) is to create a connection to it. Any "
"queries and operations are performed using the connection, which is "
"closed after the work is finished."
msgstr ""
"La première chose à faire pour travailler avec une base de données "
"SQLite (et la plupart des autres librairies Python de gestion de bases "
"de données) est de créer une connexion avec la base de données. Toutes "
"les requêtes et les opérations se font en utilisant la connection qui "
"est fermée lorsque le travail est terminé."

#: ../../tutorial/database.rst:32
msgid ""
"In web applications this connection is typically tied to the request. It "
"is created at some point when handling a request, and closed before the "
"response is sent."
msgstr ""
"Dans une application web, cette connexion est généralement associée à la "
"requête. Elle est créée pendant le traitement de la requête et fermée "
"avant l'envoi de la réponse."

#: ../../tutorial/database.rst:36 ../../tutorial/database.rst:120
#: ../../tutorial/database.rst:157
msgid "``flaskr/db.py``"
msgstr "``flaskr/db.py``"

#: ../../tutorial/database.rst:63
msgid ""
":data:`g` is a special object that is unique for each request. It is "
"used to store data that might be accessed by multiple functions during "
"the request. The connection is stored and reused instead of creating a "
"new connection if ``get_db`` is called a second time in the same request."
msgstr ""
":data:`g` est un objet spécial qui est unique pour chaque requête. Il "
"est utilisé pour stocker des données qui pourraient être accédées par "
"plusieurs fonctions durant le traitement de la requête. La connexion est "
"conservée et réutilisée si ``get_db`` est appelé une deuxième fois dans "
"le traitement de la même requête."

#: ../../tutorial/database.rst:69
msgid ""
":data:`current_app` is another special object that points to the Flask "
"application handling the request. Since you used an application factory, "
"there is no application object when writing the rest of your code. "
"``get_db`` will be called when the application has been created and is "
"handling a request, so :data:`current_app` can be used."
msgstr ""
":data:`current_app` est un autre objet spécial qui pointe vers "
"l'application Flask qui traite la requête. Comme vous avez utilisé une "
"usine à application, il n'y a pas d'objet application en écrivant la "
"suite de votre code. ``get_db`` sera appelée lorsque l'application a été "
"créée et qu'elle traite une requête. De cette façon, :data:`current_app` "
"peut être utilisé. "

#: ../../tutorial/database.rst:75
msgid ""
":func:`sqlite3.connect` establishes a connection to the file pointed at "
"by the ``DATABASE`` configuration key. This file doesn't have to exist "
"yet, and won't until you initialize the database later."
msgstr ""
":func:`sqlite3.connect` crée une connexion avec le fichier correspondant "
"au paramètre de configuration ``DATABASE``. Il n'est pas nécessaire que "
"ce fichier existe. Il sera créé plus tard lors de l'initialisation de la "
"base de données."

#: ../../tutorial/database.rst:79
msgid ""
":class:`sqlite3.Row` tells the connection to return rows that behave "
"like dicts. This allows accessing the columns by name."
msgstr ""
"Le paramètre :class:`sqlite3.Row` indique que la connexion doit "
"retourner des lignes qui sont équivalentes à des dictionnaires Python. "
"Cela permet d'accéder aux colonnes en indiquant leur nom."

#: ../../tutorial/database.rst:82
msgid ""
"``close_db`` checks if a connection was created by checking if ``g.db`` "
"was set. If the connection exists, it is closed. Further down you will "
"tell your application about the ``close_db`` function in the application "
"factory so that it is called after each request."
msgstr ""
"``close_db`` vérifie si une connexion a été créée en regardant si ``g."
"db`` a été initialisé. Si la connexion existe, elle est fermé. Vous "
"apprendrez plus tard à votre application d'utiliser la fonction "
"``close_db`` depuis l'usine à applications de façon à l'appeler "
"automatiquement après le traitement de chaque requête."

#: ../../tutorial/database.rst:89
msgid "Create the Tables"
msgstr "Création des tables"

#: ../../tutorial/database.rst:91
msgid ""
"In SQLite, data is stored in *tables* and *columns*. These need to be "
"created before you can store and retrieve data. Flaskr will store users "
"in the ``user`` table, and posts in the ``post`` table. Create a file "
"with the SQL commands needed to create empty tables:"
msgstr ""
"Dans SQLite, les données sont stockées dans des *tables* et des "
"*colonnes*. Elles doivent être créées avant que vous ne puissiez stocker "
"et récupérer des données dans la base de données. Flask va stocker les "
"utilisateurs dans la table ``user`` et les messages dans la table "
"``posts``. Une telle base de données peut être créée en utilisant les "
"commandes SQL ci-dessous:"

#: ../../tutorial/database.rst:96
msgid "``flaskr/schema.sql``"
msgstr "``flaskr/schema.sql``"

#: ../../tutorial/database.rst:117
msgid ""
"Add the Python functions that will run these SQL commands to the ``db."
"py`` file:"
msgstr ""
"Vous pouvez exécuter ces commandes SQL en les intégrant comme ci-dessous "
"dans le fichier ``db.py``:"

#: ../../tutorial/database.rst:137
msgid ""
":meth:`open_resource() <Flask.open_resource>` opens a file relative to "
"the ``flaskr`` package, which is useful since you won't necessarily know "
"where that location is when deploying the application later. ``get_db`` "
"returns a database connection, which is used to execute the commands "
"read from the file."
msgstr ""
":meth:`open_resource() <Flask.open_resource>` ouvre un fichier qui est "
"relatif au package ``flaskr``. L'utilisation d'un chemin relatif est "
"intéressant car vous ne saurez pas nécessairement quel sera ce "
"répertoire lorsque vous mettrez votre application en production. "
"``get_db`` retourne une connection à la base de données, qui est "
"utilisée pour exécuter les commandes lues dans le fichier passé en "
"argument."

#: ../../tutorial/database.rst:143
msgid ""
":func:`click.command` defines a command line command called ``init-db`` "
"that calls the ``init_db`` function and shows a success message to the "
"user. You can read :ref:`cli` to learn more about writing commands."
msgstr ""
":func:`click.command` définit uns interface en ligne de commande "
"baptisée ``init-db`` qui appelle la fonction ``init_db`` and affiche un "
"message de réussite à l'utilisateur. Vous pouvez lire le document :ref:"
"`cli` pour en savoir plus sur comment écrire de telles commandes."

#: ../../tutorial/database.rst:149
msgid "Register with the Application"
msgstr "Enregistrement à l'application"

#: ../../tutorial/database.rst:151
msgid ""
"The ``close_db`` and ``init_db_command`` functions need to be registered "
"with the application instance; otherwise, they won't be used by the "
"application. However, since you're using a factory function, that "
"instance isn't available when writing the functions. Instead, write a "
"function that takes an application and does the registration."
msgstr ""
"Les fonctions ``close_db`` et ``init_db_command`` doivent être "
"enregistrée dans l'instance de l'application. Sinon, elles ne peuvent "
"pas être utilisées par l'application. Cependant, puisque vous utiliser "
"une fonction de type usine, cette instance n'est pas disponible lors de "
"l'écriture des fonctions. Vous devez plutôt écrire une fonction qui "
"prend une application comme argument et l'enregistre."

#: ../../tutorial/database.rst:164
msgid ""
":meth:`app.teardown_appcontext() <Flask.teardown_appcontext>` tells "
"Flask to call that function when cleaning up after returning the "
"response."
msgstr ""
":meth:`app.teardown_appcontext() <Flask.teardown_appcontext>` demande à "
"Flask d'appeler cette fonction lorsqu'elle libère les ressources "
"associées à une requête après avoir retourné la réponse."

#: ../../tutorial/database.rst:168
msgid ""
":meth:`app.cli.add_command() <click.Group.add_command>` adds a new "
"command that can be called with the ``flask`` command."
msgstr ""
":meth:`app.cli.add_command() <click.Group.add_command>` ajoute une "
"nouvelle commande qui peut être appelée par la commande ``flask``."

#: ../../tutorial/database.rst:171
msgid ""
"Import and call this function from the factory. Place the new code at "
"the end of the factory function before returning the app."
msgstr ""
"Vous devez importer et appeler cette fonction depuis l'usine à "
"applications. Placez le nouveau code à la fin de la fonction contenant "
"l'usine à applications et juste avant de retourner l'application."

#: ../../tutorial/database.rst:174
msgid "``flaskr/__init__.py``"
msgstr "``flaskr/__init__.py``"

#: ../../tutorial/database.rst:188
msgid "Initialize the Database File"
msgstr "Initialisation de la base de données"

#: ../../tutorial/database.rst:190
msgid ""
"Now that ``init-db`` has been registered with the app, it can be called "
"using the ``flask`` command, similar to the ``run`` command from the "
"previous page."
msgstr ""
"Maintenant que la fonction ``init-db`` a été enregistrée dans "
"l'application, elle peut être lancée en utilisant la commande ``flask``, "
"similaire à la commande ``run`` de la page précédente."

#: ../../tutorial/database.rst:196
msgid ""
"If you're still running the server from the previous page, you can "
"either stop the server, or run this command in a new terminal. If you "
"use a new terminal, remember to change to your project directory and "
"activate the env as described in :ref:`install-activate-env`. You'll "
"also need to set ``FLASK_APP`` and ``FLASK_ENV`` as shown on the "
"previous page."
msgstr ""
"Si le serveur que vous aviez lancé pour la page précédente tourne "
"toujours, vous pouvez soit l'arrêter, soit lancer cette commande dans un "
"nouveau terminal. Si vous utilisez un nouveau terminal, n'oubliez pas "
"d'aller dans le répertoire de votre projet et d'activer l'environnement "
"virtuel comme expliqué dans :ref:`install-activate-env`. Vous devrez "
"aussi initialiser les variables d'environnement  ``FLASK_APP`` et "
"``FLASK_ENV`` comme expliqué dans la page précédente."

#: ../../tutorial/database.rst:203
msgid "Run the ``init-db`` command:"
msgstr "Lancer la commande ``init-db``:"

#: ../../tutorial/database.rst:210
msgid ""
"There will now be a ``flaskr.sqlite`` file in the ``instance`` folder in "
"your project."
msgstr ""
"Il y a maintenant un fichier dénommé ``flaskr.sqlite`` dans le "
"répertoire ``instance`` de votre projet."

#: ../../tutorial/database.rst:213
msgid "Continue to :doc:`views`."
msgstr "Continuez en lisant le document :doc:`views`."
